# coding:utf-8
import pandas as pd

mylist = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
mydict = {
    'a': [1, 2, 3, 4],
    'b': [5, 6, 7, 8],
    'c': [9, 10, 11, 12],
    'd': [13, 14, 15, 16]
}
d = pd.DataFrame(mydict, index=['w', 'x', 'y', 'z'])
# 通过属性进行选取
d1 = d.c  # 可以直接通过属性选取DataFrame的一列
# 该方法限制较多，一是不能选到行，二是以数字或其他非法字符开头的列标签不能选取
#
#通过运算符[]进行选取
d2 = d['c']  # 直接按列名进行选取一列，列名必须存在
d3 = d['y':]  # 使用按标签切片的方式，选取的是行
d4 = d[2:]  # 也可以直接使用数字切片，也是选取的行
#
#使用.loc[]方法使用标签进行选取
d5 = d.loc['y']  # 该方法可以直接选取到行，返回一个series
d6 = d.loc['y':]  # 该方法也可以使用切片
d7 = d.loc['z', 'a']  # 该方法也可以同时接受行列两个参数进行选取
d8 = d.loc['y':, 'a':'c']  # 这两个参数还可以同时使用切片
# 注意！两个参数时顺序为先行后列！！！
#
#通过.iloc[]方法使用位置进行选取，该方法与上述基本一样，只是将标签换为位置
d9 = d.iloc[2]  # 直接选取到行，返回一个series
d10 = d.iloc[2:]  # 使用切片
d11 = d.iloc[2, 2]  # 两个参数分别代表行和列
d12 = d.iloc[2:, 0:2]  # 两个参数的切片
# 使用位置切片和使用标签切片有所不同，位置切片不包括后端，标签切片两端都包括
#
# 通过条件筛选选取数据
d13 = d[d['c'] > 10]  # 以某一列作为条件筛选行
d14 = d.loc[:, d.loc['y'] > 10]  # 以某一行作为条件筛选列，注意与上式的不同
d15 = d.loc[d['c'] > 10, d.loc['y'] > 10]  # 将行和列作为筛选条件组合起来
d16 = d.loc[(d['a'] > 3) & (d['c'] > 10)]  # 将条件通过& | 进行组合，注意不是and or
print(d)
